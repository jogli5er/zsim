/** $lic$
 * Copyright (C) 2012-2015 by Massachusetts Institute of Technology
 * Copyright (C) 2010-2013 by The Board of Trustees of Stanford University
 * Copyright (C) 2017 by Google (implemented by Grant Ayers)
 *
 * This file is part of zsim.
 *
 * zsim is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, version 2.
 *
 * If you use this software in your research, we request that you reference
 * the zsim paper ("ZSim: Fast and Accurate Microarchitectural Simulation of
 * Thousand-Core Systems", Sanchez and Kozyrakis, ISCA-40, June 2013) as the
 * source of the simulator in any publications that use this software, and that
 * you send us a citation of your work.
 *
 * zsim is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef TABLE_PREFETCHER_H_
#define TABLE_PREFETCHER_H_

#include "g_std/g_string.h"
#include "g_std/g_unordered_map.h"
#include "g_std/g_unordered_set.h"
#include "cache_prefetcher.h"
#include "filter_cache.h"
#include "memory_hierarchy.h"
#include "stats.h"

/*
 * The Table Prefetcher reads a CSV file where each line is of the form "PC,Delta,Confidence,Probability":
 *   PC          : The instruction causing the memory access (decimal or hexadecimal)
 *   Delta       : The (signed) distance from the data miss address that should be prefetched
 *   Confidence  : The confidence of this prediction [0,1]
 *   Probability : The likelihood that this delta is correct among the set of deltas for this PC [0,1]
 *
 * The prefetcher can be configured to act only above a given confidence and/or probability threshold.
 * It can be placed after any cache in the hierarchy, and can inject prefetches starting at any level of the
 * hierarchy.
 *
 * The 'degree' option specifies how many prefetches should be generated by applying the same delta.
 * For example, if the table has a delta of 64 for a given instruction, for miss address A, a degree of three would
 * emit the following prefetches: A + delta, A + 2*delta, A + 3*delta
 *
 * The 'stride detection' option limits the degree of prefetching based on whether or not a stride has been detected.
 * If the deltas between the current and last two miss addresses for the PC are the same, and the PC and observed delta
 * are present in the table, then additional prefetches (a total of 'degree') are issued.
 *
 * Note that the 'degree' and 'stride detection' options exist to support basic stream prefetching when the table input
 * is assumed to not do so. These options can be disabled to prefetch only explicit entries from the table.
 *
 */

class TablePrefetcher : public CachePrefetcher {
    public:
        explicit TablePrefetcher(const g_string& _name, const g_string& _target, bool _monitor_GETS, bool _monitor_GETX,
                                 const g_string& _table_file, double _conf_thresh, double _prob_thresh, uint32_t _degree,
                                 bool _stride_detection);
        void initStats(AggregateStat* _parentStat) override;
        uint64_t access(MemReq& _req) override;
        void prefetch(MemReq& _req) override;

    private:
        void schedulePrefetch(uint64_t _addr, const MemReq &_req);
        void readTable(const g_string& _name);
        bool monitor_GETS_;
        bool monitor_GETX_;
        g_unordered_map<uint64_t, g_unordered_set<uint64_t>> table_;
        double conf_thresh_;
        double prob_thresh_;
        uint32_t degree_;
        g_unordered_map<uint64_t, std::pair<uint64_t, uint64_t>> history_;
        bool stride_detection_;
        Counter prof_emitted_prefetches_;
};

#endif  // TABLE_PREFETCHER_H_
